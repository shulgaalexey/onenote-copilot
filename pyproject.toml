[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "onenote-copilot"
version = "0.1.0"
description = "AI agent system for enhanced OneNote interactions and productivity"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "OneNote Copilot Team", email = "dev@onenote-copilot.com"},
]
keywords = ["ai", "agents", "onenote", "productivity", "langgraph"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core LangGraph and AI dependencies
    "langgraph>=0.2.0",
    "langchain>=0.3.0",
    "langchain-openai>=0.2.0",
    "langsmith>=0.2.0",

    # Data validation and configuration
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",

    # Microsoft Graph API integration
    "msal>=1.28.0",
    "requests>=2.31.0",
    "httpx>=0.27.0",

    # CLI and user interface
    "typer>=0.12.0",
    "rich>=13.0.0",
    "click>=8.1.0",

    # Development and quality tools
    "ruff>=0.6.0",
    "mypy>=1.8.0",
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",

    # Utilities
    "loguru>=0.7.0",
    "tenacity>=8.2.0",
    "async-timeout>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
    "pre-commit>=3.6.0",
    "black>=24.0.0",
    "isort>=5.13.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/your-org/onenote-copilot"
Documentation = "https://github.com/your-org/onenote-copilot/docs"
Repository = "https://github.com/your-org/onenote-copilot"
Issues = "https://github.com/your-org/onenote-copilot/issues"

[project.scripts]
onenote-copilot = "src.main:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.json", "*.yaml", "*.yml"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "SIM"]

[tool.ruff.isort]
known-first-party = ["src"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests/"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--tb=short",  # Shorter traceback format
    "--maxfail=5",  # Stop after 5 failures for faster feedback
    # Coverage options (only when needed)
    # "--cov=src",
    # "--cov-report=term-missing",
    # "--cov-report=xml",
    # "--cov-report=html",
    "--durations=10",
    # Parallel execution (only when pytest-xdist is available)
    # "-n", "auto",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Collect ignore patterns for faster collection
collect_ignore = [
    "tests/test_performance_manual.py",
    "tests/test_slow_integration.py",
    "tests/benchmarks/",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "fast: Quick tests that run in <0.1s",
    "network: Tests that require network access",
    # Phase 2: Advanced categorization markers
    "auth: Authentication-related tests",
    "search: Search functionality tests",
    "embedding: Embedding generation tests",
    "vector_store: Vector storage tests",
    "cli: Command-line interface tests",
    "agent: AI agent functionality tests",
    "performance: Performance-sensitive tests",
    "memory: Memory usage tests",
    "database: Database operation tests",
    "api: External API integration tests",
    "mock_heavy: Tests that mock heavy dependencies",
    "session_scoped: Tests using session-scoped fixtures",
    "module_scoped: Tests using module-scoped fixtures",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore::RuntimeWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
